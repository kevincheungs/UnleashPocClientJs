export interface MetricsOptions {
    onError: OnError;
    appName: string;
    metricsInterval: number;
    disableMetrics?: boolean;
    url: URL | string;
    clientKey: string;
    fetch: any;
    headerName: string;
}
interface Bucket {
    start: Date;
    stop: Date | null;
    toggles: {
        [s: string]: {
            yes: number;
            no: number;
        };
    };
}
declare type OnError = (error: unknown) => void;
export default class Metrics {
    private onError;
    private bucket;
    private appName;
    private metricsInterval;
    private disabled;
    private url;
    private clientKey;
    private timer;
    private fetch;
    private headerName;
    constructor({ onError, appName, metricsInterval, disableMetrics, url, clientKey, fetch, headerName, }: MetricsOptions);
    start(): false | undefined;
    stop(): void;
    createEmptyBucket(): Bucket;
    sendMetrics(): Promise<void>;
    count(name: string, enabled: boolean): boolean;
    private assertBucket;
    private startTimer;
    private bucketIsEmpty;
    private getPayload;
}
export {};
//# sourceMappingURL=metrics.d.ts.map